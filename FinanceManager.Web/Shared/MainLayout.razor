@inherits LayoutComponentBase
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.Lists

<div class="main-container">
<SfSidebar class="dockSidebar" Width="220px" DockSize="60px" Target=".maincontent" EnableDock="true" Type="@SidebarType.Auto"  @bind-IsOpen="SidebarToggle">
            <ChildContent>
                <SfListView DataSource="@List" TValue="listData" CssClass="e-template-list" ShowIcon="true">
                    <ListViewFieldSettings TValue="listData" Id="Id" Text="Text" IconCss="IconCss"></ListViewFieldSettings>
                    <ListViewEvents TValue="listData" Clicked="OnSelect"></ListViewEvents>
                </SfListView>
            </ChildContent>
        </SfSidebar>
    @*Initialize the Toolbar component*@
    <SfToolbar CssClass="dockToolbar">
        <ToolbarEvents Clicked="@Toggle"></ToolbarEvents>
        <ToolbarItems>
            <ToolbarItem PrefixIcon="e-icons e-menu" TooltipText="Menu"></ToolbarItem>
                <ToolbarItem>
                    <Template>
                        <div class="e-folder">
                            <div class="e-folder-name">Blazor Documentation</div>
                        </div>
                    </Template>
                </ToolbarItem>
            </ToolbarItems>
    </SfToolbar>
    <div id="main-content " class="maincontent">
        <div>
            <div class="container p-2">@Body</div>
        </div>
    </div>
</div>
<style>
    .main-container {
        height: 100%;
    }

    .maincontent {
        top: 40px;
    }

    .dockSidebar {
        position: fixed;
        top: 40px !important;
        z-index: 1000;
    }
    .e-toolbar {
        height: 40px !important;
        width: 100% !important;
        position: fixed;
    }
    .e-toolbar .e-tbar-btn:hover {
        background: #c0e3a2;
        border: 1px solid green;
    }

    .c-icon {
        margin: 0px 10px 0px 0px !important;
    }

    .e-sidebar.e-left.e-close {
        text-align: center;
    }

    .e-sidebar.e-left.e-close .e-icons {
        text-align: center;
        margin : 0 !important;
    }

    .e-text-content > div {
    }

    .content {
        padding: 5px;
    }

</style>
@code {
    string ContentText = "The Blazor DataGrid is a feature-rich component useful for displaying data in a tabular format. Its wide range of functionalities includes data binding, editing, Excel-like filtering, custom sorting, aggregating rows, selection, and support for Excel, CSV, and PDF formats. It loads millions of records in just a second. It has flexible editing and intuitive record selection modes. Also, it has seamless data exporting options like PDF, CSV, and Excel.";
    public bool SidebarToggle = false;


    // Specifies the event handler for Clicked event in Toolbar component. It's used to open/close the Sidebar component.
    public void Toggle(ClickEventArgs args)
    {
        if (args.Item.TooltipText == "Menu")
        {
            SidebarToggle = !SidebarToggle;
        }
    }
    // Specify the value of ListView component DataSource property.
    public List<listData> List = new List<listData>
    {
        new listData {Id="1", Text = "Grid", IconCss = "e-icons e-menu c-icon", Description = "The Blazor DataGrid is a feature-rich component useful for displaying data in a tabular format. Its wide range of functionalities includes data binding, editing, Excel-like filtering, custom sorting, aggregating rows, selection, and support for Excel, CSV, and PDF formats. It loads millions of records in just a second. It has flexible editing and intuitive record selection modes. Also, it has seamless data exporting options like PDF, CSV, and Excel." },
        new listData {Id="2",Text = "Chart", IconCss = "sb-icons icon-chart e-sb-icon control-icon", Description = "The Blazor Charts is a well-crafted charting component to visualize data. It contains a rich UI gallery of 30+ charts and graphs, ranging from line to financial that cater to all charting scenarios. Its high performance helps to render large amounts of data quickly. It also comes with features such as zooming, panning, tooltip, crosshair, trackball, highlight, and selection." },
        new listData {Id="3",Text = "Datepicker", IconCss = "sb-icons icon-datepicker e-sb-icon control-icon", Description = "The Blazor DatePicker is a lightweight and mobile-friendly component that allows end-users to enter or select a date value. It has month, year, and decade view options to quickly navigate to the desired date. It supports minimum dates, maximum dates, and disabled dates to restrict the date selection. It has built-in features such as validation, custom date formats, range restriction, and disable dates to enhance the progressive usage." },
        new listData {Id="4", Text = "Dialog", IconCss = "sb-icons icon-dialog e-sb-icon control-icon", Description = "The Blazor Dialog is a useful user interface (UI) component for informing users about critical information, errors, warnings, and questions, as well as confirming decisions and collecting input from users. The component has a rich set of built-in features such as action buttons, positioning, animations, dragging, resizing, templating, and more with mobile dialog support. The Blazor dialog provides two different types: modal dialogs and non-modal dialogs (modeless) based on interactions." },
        new listData {Id="5", Text = "Dropdown List", IconCss = "sb-icons icon-dropdownlist e-sb-icon control-icon", Description = "The Blazor Dropdown List is a quick replacement of the HTML select tags. It has a rich appearance and allows users to select a single value that is non-editable from a list of predefined values. It has several out-of-the-box features, such as data binding, filtering, grouping, UI customization, accessibility, and preselected values." }
    };

    public class listData
    {
        public string Id { get; set; }
        public string Text { get; set; }
        public string IconCss { get; set; }
        public string Description { get; set; }
    }
    // Specifies the event handler for Clicked event in ListView component.
    public void OnSelect(Syncfusion.Blazor.Lists.ClickEventArgs<listData> args)
    {
        this.ContentText = args.ItemData.Description;
    }
 }
